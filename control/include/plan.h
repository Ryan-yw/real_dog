#ifndef PLAN_H_
#define PLAN_H_




///?????????0->1???????????????????????????????§Ø?????????¦Ë?????????
//   ##????????##
//  Tc:??????????????????????????????????????
//   v:????????????????????????
//   a:??????????????????????????
//  ta:????????????????????????????????????
class TCurve
{
private:
    double Tc_;
    double v_;
    double a_;
    double ta_;

public:
    auto getTCurve(int count)->double;
    auto getCurveParam()->void;
    auto getTc()->double { return Tc_; };
    TCurve(double a, double v) { a_ = a; v_ = v; }
    ~TCurve() {}
};





///??????????????????Tc?????  x????0->a;y????0->b->0;z????0->c
//   ##????????##
//   a:x???????????????????????????
//   b:y??????????????????????????
//   c:z???????????????????????????
//   x:x??????t??????¦Ë??
//   y:y??????t??????¦Ë??
//   z:z??????t??????¦Ë??
//   s:????????
class EllipseTrajectory
{
private:
    double x_;
    double y_;
    double z_;
    double a_;
    double b_;
    double c_;
    TCurve s_;

public:
    auto getEllipseTrajectory(int count)->void;
    auto get_x()->double { return x_; };
    auto get_y()->double { return y_; };
    auto get_z()->double { return z_; };
    auto get_a()->double { return a_; };
    auto get_b()->double { return b_; };
    auto get_c()->double { return c_; };
    auto get_s()->TCurve { return s_; };
    EllipseTrajectory(double a, double b, double c, TCurve& s) :a_(a), b_(b), c_(c), s_(s), x_(0), y_(0), z_(0) {};
    ~EllipseTrajectory() {}
};



class Gait
{
public:
    EllipseTrajectory E;


    ~Gait() {}
};



///????????????????xyz??????????????
//   ##????????##
// double roll_angle_x_????x??????????????????????????????
// double yaw_angle_y_????y??????????????????????????????
// double pitch_angle_z_????z??????????????????????????????
// double pitch_????t?????????
// double roll_????t?????????
// double yaw_????t??????????
// TCurve b_r_s_:????????
//   s:????????
class BodyPose
{
private:
    double roll_angle_x_;
    double yaw_angle_y_;
    double pitch_angle_z_;
    double pitch_;
    double roll_;
    double yaw_;
    TCurve b_r_s_;

public:
    auto getBodyRotationTrajectory(int count)->void;
    auto getCurrentRoll()->double { return roll_; };
    auto getCurrentPitch()->double { return pitch_; };
    auto getCurrentYaw()->double { return yaw_; };
    auto getRollTotalAngle()->double { return roll_angle_x_; };
    auto getPitchTotalAngle()->double { return pitch_angle_z_; };
    auto getYawTotalAngle()->double { return yaw_angle_y_; };
    auto getTcurve()->TCurve { return b_r_s_; };
    BodyPose(double roll, double yaw, double pitch, TCurve s) : roll_angle_x_(roll), yaw_angle_y_(yaw), pitch_angle_z_(pitch), b_r_s_(s), pitch_(0), yaw_(0), roll_(0) {}
    ~BodyPose() {};
};






/***********************????????????***********************/
auto trotPlanSameLeg(int step_num, int count, EllipseTrajectory* param, double* input)->int;
auto trotPlanSymmetryLeg(int n, int count, EllipseTrajectory* Ellipse, double* input)->int;
auto walkPlanSameLeg(int n, int count, EllipseTrajectory* param, double* input)->int;
auto walkPlanSymmetryLeg(int n, int count, EllipseTrajectory* Ellipse, double* input)->int;
auto posePlan(int count, EllipseTrajectory* Ellipse, BodyPose* body_pose, double* input)->int;
auto posePlan(double* body_pose, double* input)->void;
auto upPlan(int count, EllipseTrajectory* Ellipse, double distance, double* input)->int;
auto updownPlanSameLeg(int count, EllipseTrajectory* Ellipse, double distance, double* input)->int;
auto updownPlanSymmetry(int count, EllipseTrajectory* Ellipse, double distance, double* input)->int;
auto turnPlanTrotSameLeg(int n, int count, EllipseTrajectory* Ellipse, BodyPose* body_pose_param, double* input)->int;
auto walkPlanSameLeg2(int n, int count, EllipseTrajectory* Ellipse, double* input,double body_amplitude)->int;
auto walkPlanSameLeg3(int n, int count, EllipseTrajectory* Ellipse, TCurve* s1, double* input, double* body_cm)->int;
#endif



